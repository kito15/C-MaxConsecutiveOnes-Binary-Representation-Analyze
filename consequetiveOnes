#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);

int parse_int(char*);
int main()
{
    int n = parse_int(ltrim(rtrim(readline())));
    int temp=n;
    int i, j,count=0;
    int *arr=malloc(sizeof(int)*n);
    int *max=malloc(sizeof(int)*n);

    while(temp>0){
        i=(temp%10)%2;
        arr[j]=i;
        j++;
        temp=temp/2;
    
    }
    int k=j-1;
    int x=0;
    if (n<400){
        while(k>=0){
            if (arr[k]==1){
            count=count+1;
            }else{
                max[x]=count;
                x++;
                count=0;
            }
        k--;
        }
    }else{
        while(k>=-1){
            if (arr[k]==1){
            count=count+1;
            }else{
                max[x]=count;
                x++;
                count=0;
            }
        k--;
        }
    }
    for (int b=0; b<x; b++){
         if (max[0]<max[b]){
             max[0]=max[b];
         }
    }
    printf("%d", max[0]);
    
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
